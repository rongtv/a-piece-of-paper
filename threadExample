package exampleThread;

import java.util.concurrent.locks.*;
class Apple implements Runnable{
	private int num =50;

	private final ReentrantLock lock = new ReentrantLock();//创建锁对象。。
	public void run(){
		for(int i = 0;i<50;i++){
			try {
				eat();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void eat() throws InterruptedException{
		//加锁
		lock.lock();
		try{
			if(num >0){
				//使用睡眠10毫秒验证
				Thread.sleep(10);
				System.out.println(Thread.currentThread().getName()+"吃了"+ num-- +"苹果");
			}
		}finally{
			//释放锁
			lock.unlock();
		}
		
	}
}

public class Test{
	public static void main(String[] args){
		Apple a = new Apple();
		new Thread(a,"A").start();
		new Thread(a,"B").start();
		new Thread(a,"C").start();
	}	
} 
